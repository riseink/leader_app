.img-responsive {
  width: 100%;
  height: auto;
  display: block;
}

.position-relative {
  position:relative;
}

.clearfix {
  @include clearfix;
}

// TODO: cleanup styles that no longer apply

.flex_column_container{
  // flex wrapper
  display: flex;
}
.flex_column_container .flex_column_set{
  // class for veritcal column
  display: flex;
  flex-direction: column;
  align-content: stretch;
}
.flex_column_container .flex_column_set .flex_column_expand{
  // class for cell you want to grow across columns
  flex-grow: 1;
}

.text-align--right {
  text-align: right;
}

.text-align--center {
  text-align: center;
}

.bold { font-weight: 800 }


@each $size, $value in map-get($margin-map, small-screen) {

  .margin-#{$size} {
    margin: $value;
    @media(min-width: $sm-breakpoint) { margin: map-deep-get($margin-map, large-screen, $size) }
  }
  .margin-#{$size}-x {
    margin-left: $value; margin-right: $value;
    @media(min-width: $sm-breakpoint) { margin-left: map-deep-get($margin-map, large-screen, $size); margin-right: map-deep-get($margin-map, large-screen, $size) }
  }
  .margin-#{$size}-y {
    margin-top: $value; margin-bottom: $value;
    @media(min-width: $sm-breakpoint) { margin-top: map-deep-get($margin-map, large-screen, $size); margin-bottom: map-deep-get($margin-map, large-screen, $size) }
  }
  .margin-#{$size}-l {
    margin-left: $value;
    @media(min-width: $sm-breakpoint) { margin-left: map-deep-get($margin-map, large-screen, $size) }
  }
  .margin-#{$size}-r {
    margin-right: $value;
    @media(min-width: $sm-breakpoint) { margin-right: map-deep-get($margin-map, large-screen, $size) }
  }
  .margin-#{$size}-t {
    margin-top: $value;
    @media(min-width: $sm-breakpoint) { margin-top: map-deep-get($margin-map, large-screen, $size) }
  }
  .margin-#{$size}-b {
    margin-bottom: $value;
    @media(min-width: $sm-breakpoint) { margin-bottom: map-deep-get($margin-map, large-screen, $size) }
  }

  .padding-#{$size} {
    padding: $value;
    @media(min-width: $sm-breakpoint) { padding: map-deep-get($margin-map, large-screen, $size) }
  }
  .padding-#{$size}-x {
    margin-left: $value; margin-right: $value;
    @media(min-width: $sm-breakpoint) { padding-left: map-deep-get($margin-map, large-screen, $size); padding-right: map-deep-get($margin-map, large-screen, $size) }
  }
  .padding-#{$size}-y {
    padding-top: $value; padding-bottom: $value;
    @media(min-width: $sm-breakpoint) { padding-top: map-deep-get($margin-map, large-screen, $size); padding-bottom: map-deep-get($margin-map, large-screen, $size) }
  }
  .padding-#{$size}-l {
    padding-left: $value;
    @media(min-width: $sm-breakpoint) { padding-left: map-deep-get($margin-map, large-screen, $size) }
  }
  .padding-#{$size}-r {
    padding-right: $value;
    @media(min-width: $sm-breakpoint) { padding-right: map-deep-get($margin-map, large-screen, $size) }
  }
  .padding-#{$size}-t {
    padding-top: $value;
    @media(min-width: $sm-breakpoint) { padding-top: map-deep-get($margin-map, large-screen, $size) }
  }
  .padding-#{$size}-b {
    padding-bottom: $value;
    @media(min-width: $sm-breakpoint) { padding-bottom: map-deep-get($margin-map, large-screen, $size) }
  }
}

.bg-primary { background-color: $primary }
.bg-secondary { background-color: $secondary }
.bg-tertiary { background-color: $tertiary }
.bg-light-gray { background-color: $light-gray }
.bg-med-gray { background-color: $med-gray }
.bg-white { background-color: #fff; }

.primary { color: $primary }

.hidden{ display: none; }
.inline { display: inline; }
.center { text-align: center; }

.desktop-only {
  display: none;
  @include respond-to(lg) {
    display: unset;
  }
}

.hide-until-sm {
  display: none;
  @include respond-to(sm) {
    display: inline-block;
  }
}

.disallow-scroll {
  overflow-y: hidden;
  position: fixed;
  width: 100%;
}

// underline that grows from 0 width to 100% of element width (left-to-right)
.custom-underline {
  text-decoration: none; 
  position: relative;
  display: inline-block;
  cursor: pointer;
  &::after {
    content: "";
    position: absolute;
    background-color: #000000;
    height: 8px;
    top: 100%;
    left: 0%;
    width: 0%;
    transition: width 200ms ease-in-out;
  }
  &:hover {
    &::after {
      width: 100%;
    }
  }
}

// Removes x-padding from Content flex blocks
// (useful for making content in a Content block align with other flex containers' full-width or wrapped content)
.flex-container.content-flush {
  .padding-sm {
    padding-left: 0;
    padding-right: 0;
  }
}
