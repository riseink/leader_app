$video-X-offset: 20%;

#intro_videos {
    height: calc(100vh - 80px);
    border: 1px solid transparent;
    opacity: 1;
    transition: opacity 500ms ease-in-out;

    .block-video {
        height: 100%;
        position: relative;
        overflow: hidden;
        border: 1px solid transparent;
    }

    &.intro-videos-hidden {
        opacity: 0;
    }
}

#scroll-indicator {

	// hide on mobile
	display: none;
	@include respond-to(lg) {
		display: block;	
	}

    position: absolute;
    top: calc(100vh - 80px);
    right: 2rem;
    z-index: 8;
    cursor: pointer;
	
	.path {
        stroke: $primary;
        fill: $primary;
    }

    .animated {
    	-webkit-animation-duration: 1s;
    	animation-duration: 1s;
    	-webkit-animation-fill-mode: both;
    	animation-fill-mode: both;
    	-webkit-animation-timing-function: linear;
    	animation-timing-function: linear;
    	animation-iteration-count: infinite;
    	-webkit-animation-iteration-count: infinite;
    }
    
    @-webkit-keyframes bounce {
    	0%, 100% {
    		-webkit-transform: translateY(0);
    	}
    	50% {
    		-webkit-transform: translateY(-5px);
    	}
    }
    @keyframes bounce {
    	0%, 100% {
    		transform: translateY(0);
    	}
    	50% {
    		transform: translateY(-5px);
    	}
    }
    
    .bounce {
    	-webkit-animation-name: bounce;
    	animation-name: bounce;
    }

    
}

@mixin client-text-styles {
    font-size: 0.625rem;
    color: $white;
    text-transform: uppercase;
    font-weight: $light;

    @include respond-to(md) {
        font-size: 0.875rem;
        line-height: 1.25rem;
        color: $text-color-medium;
        font-weight: $regular;
    }
}

@mixin title-text-styles {
    font-size: 1.5rem;
    line-height: 1.5rem;
    color: $white;
    font-weight: $regular;

    .custom-underline {
        color: unset;

        &::after {
            display: none;
        }
   
    }

    @include respond-to(md) {
        font-size: 2rem;
        line-height: 2.5rem;
        color: $text-color;
        font-weight: $bold;

        .custom-underline {
            display: inline;
            color: $very-dark;
            transition: color 300ms ease-in-out;

            &::after {
                display: unset;
                background-color: $primary;
                height: 8px;

                @include respond-to(lg) {
                    height: 8px;
                }
            }

            &:hover {
                color: $primary;
            }
        }
    }


    @include respond-to(lg) {
        font-size: 3rem;
        line-height: 3.5rem;
    }
}

// featured work samples on the home page
div.work-sample {
    display: flex;
    align-items: center;
    position: relative;
    min-height: 150px;

    &:not(:last-child) {
        // kill bottom margin for all work samples except last
        //   (need these at each breakpoint because responsive-margin mixin 
        //    re-sets the margin at each breakpoint and i don't wanna use !important)
        .over {
            margin-bottom: 0;

            @include respond-to(xxs) {
                margin-bottom: 0;
            }


            @include respond-to(xs) {
                margin-bottom: 0;
            }


            @include respond-to(sm) {
                margin-bottom: 0;
            }


            @include respond-to(md) {
                margin-bottom: 0;
            }


            @include respond-to(lg) {
                margin-bottom: 0;
            }


            @include respond-to(xl) {
                margin-bottom: 0;
            }
        }
    }

    // underlayed work sample content
    // (just the looping video right now)
    .under {
        display: none;
        z-index: 1;
        width: 60%;
        transform: translateX(-$video-X-offset);
        .looping-video {
            .fluid-video {
                position: relative;
            }
        }
    }

    // overlayed work sample content
    // (image and copy)
    .over {
        @include responsive-margin;

        position: relative;
        z-index: 2;

        // layer above underlay
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    // work sample copy
    // (client and title)
    .over__copy {
        position: absolute;
        bottom: 0;
        height: 100%;
        width: 100%;
        display: flex;
        align-items: flex-end;
        pointer-events: none;
        background: linear-gradient(to bottom, transparent 25%, rgba(0, 0, 0, 0.85) 100%);

        .over__copy--wrapper {
            width: 100%;
            padding: 1rem;

            @include respond-to(md) {
                padding: 1rem 3rem 1rem 5rem;
            }


            @include respond-to(lg) {
                padding: 1rem 3rem 1rem 5rem;
            }


            span {
                display: block;
            }
        }

        // text styles
        .client {
            @include client_text_styles;
        }

        .title {
            @include title_text_styles;

            pointer-events: all;
        }

        // re-introduce pointer-events for title link only
   
    }

    // work sample image
    .over__image {
        display: flex;

        // todo: can probably use a.over__image--click-target for whatever div.image is doing and remove div.image
        a.over__image--click-target {
            width: 100%;
        }

        div.image {
            width: 100%;
        }

        img {
            width: 100%;
            height: auto;
            display: block;
        }
    }

    @include respond-to(md) {
        // vertical spacing between work samples
        margin: 5.5rem 0;
        min-height: 250px;

        .over {
            flex-direction: row;

            // stacked => side-by-side
            margin: 0;
        }

        .over__image {
            width: 55%;
        }

        .over__copy {
            width: 45%;
            height: auto;
            position: relative;
            align-items: center;
            background: none;

            .over__copy--wrapper span {
                max-width: 350px;

                // contain length of copy
           
            }
        }
    }


    @include respond-to(lg) {
        // show looping video on larger screens
        .under {
            display: block;
        }

        // fix overlay content to the right edge of the screen
        .over {
            width: 75%;
            position: absolute;
            right: 0;
            // top: 0;
        }

        .over__copy {
            width: 450px;
        }

        .over__image {
            width: 40%;
        }
    }


    @media (min-width: 1236px) {
        .over {
            width: auto;
            left: unset;
            right: 5%;
        }

        .over__copy, .over__image {
            width: 50%;
        }
    }

    @include respond-to(xl) {
        .over {
            left: unset;
            right: 10%;
        }

        .over__copy, .over__image {
            width: 50%;
        }
    }
}

// flip-flopped styles for 'reverse' work samples
// (those that are copy on left, image on right)
div.work-sample.reverse {
    // identical to non-reverse work samples until md-breakpoint (768px)

    @include respond-to(md) {
        justify-content: flex-end;

        .under {
            transform: translateX($video-X-offset);
        }

        .over {
            flex-direction: row-reverse;
            left: 0;
            right: unset;
        }

        .over__copy {
            text-align: right;
            justify-content: flex-end;

            .over__copy--wrapper {
                padding: 1rem;

                @include respond-to(md) {
                    padding: 1rem 5rem 1rem 3rem;
                }


                @include respond-to(lg) {
                    padding: 1rem 5rem 1rem 3rem;
                }
            }
        }

        .over__image {
            justify-content: flex-start;
        }
    }


    @media (min-width: 1236px) {
        .over {
            right: unset;
            left: 5%;
        }
    }

    @include respond-to(xl) {
        .over {
            right: unset;
            left: 10%;
        }
    }
}

// animation overrides

div.work-sample {
    // kill animations on small screens
    .willFadeFromLeft,
    .willFadeFromRight,
    .willFadeFromBottom {
        transform: unset;
        opacity: unset;
    }

    .willFadeFromRight,
    .willFadeFromLeft {
        &.image {
            @include will_fade_from_y(1rem);
        }

        &.client {
            @include will_fade_from_y(1rem);
        }

        &.title {
            @include will_fade_from_y(1rem);
        }
    }

    // reintroduce animations on larger screens
    @include respond-to(md) {
        // override default animation distances for specific elements
        // (image, video, client & title move farther than default behavior)
        .willFadeFromLeft {
            &.image {
                @include will_fade_from_x(-(4 * $animate-x-distance), 500ms, 125ms);
            }

            &.looping-video {
                @include will_fade_from_x(-(4 * $animate-x-distance), 500ms, 250ms);
            }

            &.client {
                @include will_fade_from_x(-(3 * $animate-x-distance), 500ms, 250ms);
            }

            &.title {
                @include will_fade_from_x(-(3 * $animate-x-distance), 500ms, 500ms);
            }
        }

        .willFadeFromRight {
            &.image {
                @include will_fade_from_x(4 * $animate-x-distance, 500ms, 125ms);
            }

            &.looping-video {
                @include will_fade_from_x(4 * $animate-x-distance, 500ms, 250ms);
            }

            &.client {
                @include will_fade_from_x(3 * $animate-x-distance, 500ms, 250ms);
            }

            &.title {
                @include will_fade_from_x(3 * $animate-x-distance, 500ms, 500ms);
            }
        }
    }
}